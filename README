Warning! 

The project is currently experimental, its api is inconsistent,
and subject to drastic change, lacks complete documentation,
sufficient unit testing, and is filled with disorganized messy code. 
Only tested on openjdk 1.6.0_22

-------------------------------------------------------------------

The goal of this project is facilitate the use of java libraries
on racket, by making it easier to write manual bindings and 
by also providing support for automatic binding

Documentation can be found in the scribblings folder you can also
view it compiled by following this link http://rapacity.codealife.com/jrffi/

Installation:
make sure to have the JAVA_HOME and ARCH variables set,
place in collects folder, then run "raco setup jrffi"

Troubleshooting:
if you get one of the error messages below 
(libjava.so: cannot open shared object file: No such file or directory)
(libjvm.so: cannot open shared object file: No such file or directory)
you'll have to either hard define it in your ld.conf.d directory or
set the jre path in the LD_LIBRARY_PATH environment variable

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$JAVA_HOME/jre/lib/$ARCH:$JAVA_HOME/jre/lib/$ARCH/server

Example Usage:
; the (java package ...) require sub-form is provided by jrffi
; let's use it to import the java.lang.Integer class

> (require jrffi (java java/lang/Integer))
> (define i (new-Integer 6765))
> (Integer-toString i)
"6765"

; the Integer-toString is overloaded and dispatches on type, this checking
; can be costly, when performance matters the jinst function can be used to
; get a non-overloaded version based on the provided input argument types

> (jinst Integer-toString _jint)
#<procedure>

